// <auto-generated />
using System;
using MS_Back_Maps.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MS_Back_Maps.Migrations
{
    [DbContext(typeof(MapsContext))]
    [Migration("20241210124257_First_migration")]
    partial class First_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MS_Back_Maps.Models.CustomMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("about");

                    b.Property<int>("BombCount")
                        .HasColumnType("int")
                        .HasColumnName("bombCount");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creationDate");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("creatorId");

                    b.Property<int>("Downloads")
                        .HasColumnType("int")
                        .HasColumnName("downloads");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mapName");

                    b.Property<int>("MapSize")
                        .HasColumnType("int")
                        .HasColumnName("mapSize");

                    b.Property<int>("MapType")
                        .HasColumnType("int")
                        .HasColumnName("mapType");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int")
                        .HasColumnName("ratingCount");

                    b.Property<int>("RatingSum")
                        .HasColumnType("int")
                        .HasColumnName("ratingSum");

                    b.HasKey("Id");

                    b.ToTable("CustomMaps");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.CustomMapsInUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageTime")
                        .HasColumnType("int")
                        .HasColumnName("averageTime");

                    b.Property<int>("CustomMapId")
                        .HasColumnType("int")
                        .HasColumnName("customMapID");

                    b.Property<int>("FlagsOnBombs")
                        .HasColumnType("int")
                        .HasColumnName("flagsOnBombs");

                    b.Property<int>("FlagsSum")
                        .HasColumnType("int")
                        .HasColumnName("flagsSum");

                    b.Property<int>("GamesSum")
                        .HasColumnType("int")
                        .HasColumnName("gamesSum");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("bit")
                        .HasColumnName("isAdded");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit")
                        .HasColumnName("isFavourite");

                    b.Property<string>("LastGameData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastGameData");

                    b.Property<int>("LastGameTime")
                        .HasColumnType("int")
                        .HasColumnName("lastGameTime");

                    b.Property<int>("Loses")
                        .HasColumnType("int")
                        .HasColumnName("loses");

                    b.Property<int>("OpenedBlankTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedBlankTiles");

                    b.Property<int>("OpenedNumberTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedNumberTiles");

                    b.Property<int>("OpenedTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedTiles");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<int>("TimeSpentSum")
                        .HasColumnType("int")
                        .HasColumnName("timeSpentSum");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("CustomMapId");

                    b.HasIndex("UserId", "CustomMapId")
                        .IsUnique();

                    b.ToTable("CustomMapsInUsers");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BombCount")
                        .HasColumnType("int")
                        .HasColumnName("bombCount");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mapName");

                    b.Property<int>("MapSize")
                        .HasColumnType("int")
                        .HasColumnName("mapType");

                    b.Property<int>("MapType")
                        .HasColumnType("int")
                        .HasColumnName("mapSize");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.MapsInUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageTime")
                        .HasColumnType("int")
                        .HasColumnName("averageTime");

                    b.Property<int>("FlagsOnBombs")
                        .HasColumnType("int")
                        .HasColumnName("flagsOnBombs");

                    b.Property<int>("FlagsSum")
                        .HasColumnType("int")
                        .HasColumnName("flagsSum");

                    b.Property<int>("GamesSum")
                        .HasColumnType("int")
                        .HasColumnName("gamesSum");

                    b.Property<string>("LastGameData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastGameData");

                    b.Property<int>("LastGameTime")
                        .HasColumnType("int")
                        .HasColumnName("lastGameTime");

                    b.Property<int>("Loses")
                        .HasColumnType("int")
                        .HasColumnName("loses");

                    b.Property<int>("MapId")
                        .HasColumnType("int")
                        .HasColumnName("mapID");

                    b.Property<int>("OpenedBlankTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedBlankTiles");

                    b.Property<int>("OpenedNumberTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedNumberTiles");

                    b.Property<int>("OpenedTiles")
                        .HasColumnType("int")
                        .HasColumnName("openedTiles");

                    b.Property<int>("TimeSpentSum")
                        .HasColumnType("int")
                        .HasColumnName("timeSpentSum");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId", "MapId")
                        .IsUnique();

                    b.ToTable("MapsInUsers");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.CustomMapsInUser", b =>
                {
                    b.HasOne("MS_Back_Maps.Models.CustomMap", "CustomMap")
                        .WithMany("CustomMapsInUser")
                        .HasForeignKey("CustomMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomMap");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.MapsInUser", b =>
                {
                    b.HasOne("MS_Back_Maps.Models.Map", "Map")
                        .WithMany("MapsInUsers")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.CustomMap", b =>
                {
                    b.Navigation("CustomMapsInUser");
                });

            modelBuilder.Entity("MS_Back_Maps.Models.Map", b =>
                {
                    b.Navigation("MapsInUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
